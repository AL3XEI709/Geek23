from Crypto.Util.number import *
from Crypto.Random import get_random_bytes
import gmpy2 as gp
from secret import flag

def pad(data, block_size):

    padding_size = block_size - len(data) % block_size
    padding = get_random_bytes(padding_size)
    padded_data = data + padding

    return padded_data



m = pad(flag,48)
m = bytes_to_long(m)
num = m
mask = (1 << 128) - 1  

s0 = num >> 256   
s1 = (num >> 128) & mask
s2 = num & mask
s3 = 65537*s0 - 114514*s1 + 10101*s2
s  = s0 + s1 +s2
e  = 17

p,q = [getPrime(1024) for i in range(2)]
n = p*q

c0 = gp.powmod(s0,e,n)
c1 = gp.powmod(s1,e,n)
c2 = gp.powmod(s2,e,n)

print(f's ={s}')
print(f'n ={n}')
print(f'c0 ={c0}')
print(f'c1 ={c1}')
print(f'c2 ={c2}')

'''
s =407161650974431819322104356712251918464
n =17158527562309379530092480512237964426294172985021799106516526756709920986633434334394511023940853959541481353515930265013089665157131785010726751950206407429894214644382855885299788106155876022859950073526234854682967371573580607576778008479331957868255475276181681189917120914370221320008563910973544981203097864102546153000691561077167068073051384340623696844385195433372133677264676068836477617225244189144744960914165349994735796538673270616468744103755083813646692479476749118748285656914642181718045203024994523740616166970133982430960780448750914434203653032149886480981511952059152079903765204829346819961613
c0 =13964752687088759506091724826535963054166569849445317047536015210439915510982485670509197100128693972043085707383952946765479185257786525201724594491494981766140650298990125072259049045688644567025618009060209846630074741450547097076490337885298649995969088836267546333800924012419649568097133128501924119708153505365510988696975995640160022862956130156352862513858113507662490571726907614261643663777135228671932796233856833199539695197870201084151350889930070563833498516553581311960803944247463760803176193009203413194625818099458139354184711182234044992964047207145762762219561544035644011932851844144278120908755
c1 =8397529847912722192209995838577509735837169545856136187877811036299877552826556176721479119443711551582389391462624823599136979256079002999024240147207926294901780932447879142109108779899332645625232653236910849240931873815356843467973493393661498300853671128819874351118972230736479802511387175845896222050680111145487311895216976342390110671155987309723732838565211704684995953186783910920058109288731024060147290452912080483618227993032407327000955743936838660338846605307874432019127283710710445555388696645313587874084146232269372452588769902071198026258471002337572346213318250842940788647885799414930266348578
c2 =2369946571488553421275787832146251730091586158762530021003408508759059144670222715434611329566332157157987141886499624959536043303975854436182741950401831502021212878331929459931275189805420100054363770516196872112525550690088651451555451177499061576246828625060434665271299676008811711525079252062599837769865357953690719586271070968594476511572308785018652199993205408763311621851039644438860923045039384558339255468621938224174505973433349972890177453067793207477665115231254877657949620325923227233609902179367699646705885142289640077081352742275654012199909492501176001791626484297418952246030932677889172760312
'''